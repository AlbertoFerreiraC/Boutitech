/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Proveedor;

import DataBase.ConectoBD;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author i5
 */
public class ProveedorUI extends javax.swing.JFrame {

    /**
     * Creates new form ProveedorUI
     */
    DecimalFormat decimal = new DecimalFormat("###,###,###.##");
    int condicion = 0;
    DefaultTableModel tabla = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int rowIndex, int colIndex) {
            return false;
        }
    };

    public ProveedorUI() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(255, 255, 255));
        bloqueo_general();
        cargarTitulos();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jbAgregar = new javax.swing.JButton();
        jbModificar = new javax.swing.JButton();
        jbEliminar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jtNombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jtCorreo = new javax.swing.JTextField();
        jtDireccion = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jtTelefono = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jtidProveedor = new javax.swing.JTextField();
        jbAceptar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PROVEEDOR");

        jbAgregar.setBackground(new java.awt.Color(69, 99, 123));
        jbAgregar.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        jbAgregar.setForeground(new java.awt.Color(255, 255, 255));
        jbAgregar.setText("AGREGAR");
        jbAgregar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jbAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAgregarActionPerformed(evt);
            }
        });

        jbModificar.setBackground(new java.awt.Color(69, 99, 123));
        jbModificar.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        jbModificar.setForeground(new java.awt.Color(255, 255, 255));
        jbModificar.setText("MODIFICAR");
        jbModificar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jbModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModificarActionPerformed(evt);
            }
        });

        jbEliminar.setBackground(new java.awt.Color(69, 99, 123));
        jbEliminar.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        jbEliminar.setForeground(new java.awt.Color(255, 255, 255));
        jbEliminar.setText("ELIMINAR");
        jbEliminar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jbEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEliminarActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0)), "Detalle Proveedor", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Monospaced", 0, 12))); // NOI18N

        jtNombre.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jtNombre.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtNombre.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0)));
        jtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtNombreKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Nombre:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Direcci√≥n:");

        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel14.setText("Correo:");

        jtCorreo.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jtCorreo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtCorreo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0)));
        jtCorreo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtCorreoKeyTyped(evt);
            }
        });

        jtDireccion.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jtDireccion.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtDireccion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0)));
        jtDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtDireccionKeyTyped(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel15.setText("Telefono:");

        jtTelefono.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jtTelefono.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtTelefono.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0)));
        jtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtTelefonoKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("IDProveedor:");

        jtidProveedor.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jtidProveedor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtidProveedor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0)));
        jtidProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtidProveedorActionPerformed(evt);
            }
        });
        jtidProveedor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtidProveedorKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtidProveedorKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtDireccion, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                            .addComponent(jtTelefono)
                            .addComponent(jtCorreo)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtNombre))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtidProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtidProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jbAceptar.setBackground(new java.awt.Color(69, 99, 123));
        jbAceptar.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        jbAceptar.setForeground(new java.awt.Color(255, 255, 255));
        jbAceptar.setText("ACEPTAR");
        jbAceptar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jbAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAceptarActionPerformed(evt);
            }
        });

        jbCancelar.setBackground(new java.awt.Color(69, 99, 123));
        jbCancelar.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        jbCancelar.setForeground(new java.awt.Color(255, 255, 255));
        jbCancelar.setText("CANCELAR");
        jbCancelar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jbSalir.setBackground(new java.awt.Color(69, 99, 123));
        jbSalir.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        jbSalir.setForeground(new java.awt.Color(255, 255, 255));
        jbSalir.setText("SALIR");
        jbSalir.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jbAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jbAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAgregarActionPerformed
        condicion = 1;
        jtNombre.setEnabled(true);
        jtCorreo.setEnabled(true);
        jtDireccion.setEnabled(true);
        jtTelefono.setEnabled(true);
        jtNombre.setText("");
        jtCorreo.setText("");
        jtDireccion.setText("");
        jtTelefono.setText("");
        int maxProveedorId = maxId();
        jtidProveedor.setText(Integer.toString(maxProveedorId));
        jbAgregar.setEnabled(false);
        jbModificar.setEnabled(true);
        jbEliminar.setEnabled(true);
        jtNombre.requestFocus();
    }//GEN-LAST:event_jbAgregarActionPerformed

    private void jbModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModificarActionPerformed
        jtidProveedor.setEnabled(true);
        jtidProveedor.requestFocus();
        jtNombre.setEnabled(false);
        jtCorreo.setEnabled(false);
        jtDireccion.setEnabled(false);
        jtTelefono.setEnabled(false);
        jtTelefono.setEnabled(false);
        jtNombre.setText("");
        jtCorreo.setText("");
        jtDireccion.setText("");
        jtTelefono.setText("");
        jbAgregar.setEnabled(true);
        jbModificar.setEnabled(false);
        jbEliminar.setEnabled(true);
        condicion = 2;
    }//GEN-LAST:event_jbModificarActionPerformed

    private void jbEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEliminarActionPerformed
        jtNombre.setEnabled(false);
        jtCorreo.setEnabled(false);
        jtDireccion.setEnabled(false);
        jtTelefono.setEnabled(false);
        jbAgregar.setEnabled(true);
        jbModificar.setEnabled(true);
        jbEliminar.setEnabled(false);
        jtidProveedor.requestFocus();
        jtNombre.setText("");
        jtCorreo.setText("");
        jtDireccion.setText("");
        jtTelefono.setText("");
        jtidProveedor.setText("");
        condicion = 3;
        limpiar();
    }//GEN-LAST:event_jbEliminarActionPerformed

    private void jtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtNombreKeyTyped
        char c4 = evt.getKeyChar();
        if (jtNombre.getText().length() >= 70) {
            evt.consume();
            getToolkit().beep();
        } else {
            boolean b = true;
            String letra = Character.toString(c4);
            String lineIwant = letra;
            String caracteres_permitidos = "[,!?!¬ø¬°|¬∞';:]";
            b = lineIwant.matches(caracteres_permitidos);
            if (b == true) {
                evt.consume();
                getToolkit().beep();
            }
        }
    }//GEN-LAST:event_jtNombreKeyTyped

    private void jtCorreoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtCorreoKeyTyped
        char c4 = evt.getKeyChar();
        if (jtCorreo.getText().length() >= 70) {
            evt.consume();
            getToolkit().beep();
        } else {
            boolean b = true;
            String letra = Character.toString(c4);
            String lineIwant = letra;
            String caracteres_permitidos = "[,!?!¬ø¬°|¬∞';:]";
            b = lineIwant.matches(caracteres_permitidos);
            if (b == true) {
                evt.consume();
                getToolkit().beep();
            }
        }
    }//GEN-LAST:event_jtCorreoKeyTyped

    private void jtDireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtDireccionKeyTyped
        char c4 = evt.getKeyChar();
        if (jtDireccion.getText().length() >= 150) {
            evt.consume();
            getToolkit().beep();
        } else {
            boolean b = true;
            String letra = Character.toString(c4);
            String lineIwant = letra;
            String caracteres_permitidos = "[,!?!¬ø¬°|¬∞';:]";
            b = lineIwant.matches(caracteres_permitidos);
            if (b == true) {
                evt.consume();
                getToolkit().beep();
            }
        }
    }//GEN-LAST:event_jtDireccionKeyTyped

    private void jtTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtTelefonoKeyTyped
        char c4 = evt.getKeyChar();
        if (jtTelefono.getText().length() >= 60) {
            evt.consume();
            getToolkit().beep();
        } else {
            boolean b = true;
            String letra = Character.toString(c4);
            String lineIwant = letra;
            String caracteres_permitidos = "[,\"\"*-+@!&^%$()=|;:]";
            b = lineIwant.matches(caracteres_permitidos);
            if (b == true) {
                evt.consume();
                getToolkit().beep();
            }
        }
    }//GEN-LAST:event_jtTelefonoKeyTyped

    private void jbAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAceptarActionPerformed
        if (condicion == 0) {
            JOptionPane.showMessageDialog(null, "No ha seleccionado ninguna operaci√≥n a realizar!!!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        if (condicion == 1) {
            guardar();
        }
        if (condicion == 2) {
            modificar();
        }
        if (condicion == 3) {
            eliminar();
        }
    }//GEN-LAST:event_jbAceptarActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        condicion = 0;
        jbAgregar.setEnabled(true);
        jbModificar.setEnabled(true);
        jbEliminar.setEnabled(true);
        jtNombre.setText("");
        jtCorreo.setText("");
        jtDireccion.setText("");
        jtTelefono.setText("");
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jtidProveedorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtidProveedorKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jtidProveedorKeyTyped

    private void jtidProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtidProveedorActionPerformed
        buscar_codigo();
        jtidProveedor.setEnabled(false);
        jtNombre.setEnabled(true);
        jtTelefono.setEnabled(true);
        jtCorreo.setEnabled(true);
        jtDireccion.setEnabled(true);
    }//GEN-LAST:event_jtidProveedorActionPerformed

    private void jtidProveedorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtidProveedorKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtidProveedorKeyPressed

    private void buscar_proveedor() {
        boolean encontro = false;

        ConectoBD conn = new ConectoBD();
        conn.Conectado();

        try {

            conn.resultado = conn.sentencia.executeQuery("SELECT * FROM  proveedor  WHERE idproveedor = " + this.jtidProveedor.getText());

            while (conn.resultado.next() == true) {
                encontro = true;
            }

            if (encontro == false) {
                JOptionPane.showMessageDialog(null, "No existe un registro con este codigo de Proveedor!", "Atencion", JOptionPane.ERROR_MESSAGE);
            } else {
            }

        } catch (SQLException ex) {
            Logger.getLogger(ProveedorUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProveedorUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProveedorUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProveedorUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProveedorUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProveedorUI().setVisible(true);
            }
        });
    }

    private void cargarTitulos() {

        String[] titulos;
        try {
            titulos = new String[3];
            titulos[0] = "id";
            titulos[1] = "Nombre";
            titulos[2] = "Telefono";
            tabla.setColumnIdentifiers(titulos);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No carga lista de planilla" + e.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);

        }

    }

    private void limpiar() {
        jtidProveedor.setText("");
        jtNombre.setText("");
        jtTelefono.setText("");
        jtCorreo.setText("");
        jtDireccion.setText("");
    }

    private int maxId() {
        ConectoBD conectar = new ConectoBD();
        conectar.Conectado();
        int maxValue = 0;
        try {
            ResultSet max = conectar.Maximo("idproveedor", "proveedor");
            if (max.next()) {
                maxValue = max.getInt(1);
            }
            max.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        conectar.Desconectado();
        return maxValue;
    }

    public boolean control_nombre_proveedor() {
        try {
            String pass = jtNombre.getText();
            if (pass.length() >= 70) {
                JOptionPane.showMessageDialog(null, "Los caracteres permitidos para el nombre del proveedor son 70 como m√°ximo!!!", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            } else {
                for (int i = 0; i < pass.length(); i++) {
                    char valor = pass.charAt(i);
                    boolean b = true;
                    String letra = Character.toString(valor);
                    String lineIwant = letra;
                    String caracteres_permitidos = "[,!?!¬ø¬°|¬∞';:]";
                    b = lineIwant.matches(caracteres_permitidos);
                    if (b == true) {
                        JOptionPane.showMessageDialog(null, "Los caracteres que NO est√°n permitidos en el nombre del proveedor son: [,!?!¬ø¬°|¬∞';:] ", "Error", JOptionPane.ERROR_MESSAGE);
                        return false;
                    }
                }
            }
        } catch (Exception e) {
        }
        return true;
    }

    public boolean control_direccion_proveedor() {
        try {
            String pass = jtDireccion.getText();
            if (pass.length() >= 130) {
                JOptionPane.showMessageDialog(null, "Los caracteres permitidos para la direcci√≥n son 130 como m√°ximo!!!", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            } else {
                for (int i = 0; i < pass.length(); i++) {
                    char valor = pass.charAt(i);
                    boolean b = true;
                    String letra = Character.toString(valor);
                    String lineIwant = letra;
                    String caracteres_permitidos = "[,!?!¬ø¬°|¬∞';:]";
                    b = lineIwant.matches(caracteres_permitidos);
                    if (b == true) {
                        JOptionPane.showMessageDialog(null, "Los caracteres que NO est√°n permistidos en la direcci√≥n son: [,!?!¬ø¬°|¬∞';:] ", "Error", JOptionPane.ERROR_MESSAGE);
                        return false;
                    }
                }
            }
        } catch (Exception e) {
        }
        return true;
    }

    public void bloqueo_general() {
        jtNombre.setEnabled(false);
        jtCorreo.setEnabled(false);
        jtDireccion.setEnabled(false);
        jtTelefono.setEnabled(false);
    }

    private String borrar_puntos(String num) {
        String valor = num;
        String valor2 = null;
        int largo = valor.length();
        if (largo >= 1) {
            valor2 = valor.replace(".", "");
        }
        return valor2;
    }

    private String separarMiles(String num) {
        String valor = num;
        int largo = valor.length();
        if (largo > 8) {
            valor = valor.substring(largo - 9, largo - 6) + "." + valor.substring(largo - 6, largo - 3) + "." + valor.substring(largo - 3, largo);
        } else if (largo > 7) {
            valor = valor.substring(largo - 8, largo - 6) + "." + valor.substring(largo - 6, largo - 3) + "." + valor.substring(largo - 3, largo);
        } else if (largo > 6) {
            valor = valor.substring(largo - 7, largo - 6) + "." + valor.substring(largo - 6, largo - 3) + "." + valor.substring(largo - 3, largo);
        } else if (largo > 5) {
            valor = valor.substring(largo - 6, largo - 3) + "." + valor.substring(largo - 3, largo);
        } else if (largo > 4) {
            valor = valor.substring(largo - 5, largo - 3) + "." + valor.substring(largo - 3, largo);
        } else if (largo > 3) {
            valor = valor.substring(largo - 4, largo - 3) + "." + valor.substring(largo - 3, largo);
        }
        return valor;
    }

    public boolean control_codigo() {
        ConectoBD conectar = new ConectoBD();
        conectar.Conectado();
        boolean resp = true;
        try {
            ResultSet rs_codigo = conectar.listar("*", "proveedor", "where idproveedor = " + jtidProveedor.getText());
            if (rs_codigo.next() == true) {
                resp = true;
            } else {
                resp = false;
            }
        } catch (Exception e) {
        }
        conectar.Desconectado();
        return resp;
    }

    public boolean control_campos_obligatorios() {
        boolean resp = true;

        if (jtidProveedor.getText().equals("")) {
            resp = false;
        }
        return resp;
    }

//guardar
    public void guardar() {
        ConectoBD conectar = new ConectoBD();
        conectar.Conectado();
        try {
            if (control_campos_obligatorios() == true) {
                if (control_codigo() == false) {
                    conectar.guardar("proveedor(idproveedor,nombre,telefono,correo_electronico,direccion)",
                            "'" + jtidProveedor.getText() + "','"
                            + jtNombre.getText() + "','"
                            + jtTelefono.getText() + "','"
                            + jtCorreo.getText() + "','"
                            + jtDireccion.getText() + "'");
                    JOptionPane.showMessageDialog(null, "Proveedor cargado con exito!!!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    condicion = 0;
                    bloqueo_general();
                    jtNombre.setText("");
                    jtCorreo.setText("");
                    jtDireccion.setText("");
                    jtTelefono.setText("");
                    jbAgregar.setEnabled(true);
                    jbModificar.setEnabled(true);
                    jbEliminar.setEnabled(true);
                } else {
                    JOptionPane.showMessageDialog(null, "El RUC de este proveedor ya existe!!!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Debe completar todos los campos obligatorios!!!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
        }
        conectar.Desconectado();
    }

    //modificar
    public void modificar() {
        ConectoBD conectar = new ConectoBD();
        conectar.Conectado();
        try {
            if (control_campos_obligatorios() == true) {
                conectar.actualizar("proveedor",
                        " nombre = '" + jtNombre.getText() + "', "
                        + " telefono = '" + jtTelefono.getText() + "', "
                        + " correo_electronico = '" + jtCorreo.getText() + "', "
                        + " direccion = '" + jtDireccion.getText() + "'"
                        + " where idProveedor = '" + jtidProveedor.getText() + "'");
                JOptionPane.showMessageDialog(null, "Proveedor modificado con exito!!!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                condicion = 0;
                bloqueo_general();
                jtidProveedor.setText("");
                jtNombre.setText("");
                jtCorreo.setText("");
                jtDireccion.setText("");
                jtTelefono.setText("");
                jbAgregar.setEnabled(true);
                jbModificar.setEnabled(true);
                jbEliminar.setEnabled(true);

                bloqueo_general();
            } else {
                JOptionPane.showMessageDialog(null, "Debe completar todos los campos obligatorios!!!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
        }
        conectar.Desconectado();
    }

    //eliminar
    public void eliminar() {
        ConectoBD conectar = new ConectoBD();
        conectar.Conectado();
        try {
            conectar.eliminar("proveedor", "idProveedor = '" + jtidProveedor.getText() + "'");
            JOptionPane.showMessageDialog(null, "Proveedor eliminado con exito!!!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            condicion = 0;
            jtidProveedor.setText("");
            jtNombre.setText("");
            jtCorreo.setText("");
            jtDireccion.setText("");
            jtTelefono.setText("");
            jbAgregar.setEnabled(true);
            jbModificar.setEnabled(true);
            jbEliminar.setEnabled(true);
            bloqueo_general();
            limpiar();
        } catch (Exception e) {
        }
        conectar.Desconectado();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbAceptar;
    private javax.swing.JButton jbAgregar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbEliminar;
    private javax.swing.JButton jbModificar;
    private javax.swing.JButton jbSalir;
    private javax.swing.JTextField jtCorreo;
    private javax.swing.JTextField jtDireccion;
    private javax.swing.JTextField jtNombre;
    private javax.swing.JTextField jtTelefono;
    private javax.swing.JTextField jtidProveedor;
    // End of variables declaration//GEN-END:variables

    private void buscar_codigo() {

        ConectoBD miconex = new ConectoBD();
        miconex.Conectado();

        try {
            boolean encontro = false;
            miconex.sentencia = miconex.conectar.createStatement();

            miconex.resultado = miconex.sentencia.executeQuery("SELECT * FROM proveedor WHERE idproveedor = " + this.jtidProveedor.getText());

            while (miconex.resultado.next() == true) {
                this.jtNombre.setText(miconex.resultado.getString("nombre"));
                this.jtTelefono.setText(miconex.resultado.getString("telefono"));
                this.jtCorreo.setText(miconex.resultado.getString("correo_electronico"));
                this.jtDireccion.setText(miconex.resultado.getString("direccion"));

                encontro = true;
            }

            if (encontro == false) {
                JOptionPane.showMessageDialog(null, "No existe un registro con este codigo!", "Atencion", JOptionPane.ERROR_MESSAGE);
                this.jtidProveedor.setText("");
                this.jtidProveedor.requestFocus();
            } else {
                if (condicion == 2) {
                    this.jtNombre.setEnabled(true);
                    this.jtNombre.requestFocus();
                }

                if (condicion == 3) {
                    jtidProveedor.requestFocus();
                    int respuesta = JOptionPane.showConfirmDialog(this, "Deseas Borrar el Registro?", "Confirmar", JOptionPane.YES_NO_OPTION);
                    if (respuesta == JOptionPane.YES_OPTION) {
                        miconex.sentencia = miconex.conectar.createStatement();
                        miconex.sentencia.executeUpdate("DELETE FROM proveedor WHERE idproveedor =" + this.jtidProveedor.getText());

                        JOptionPane.showMessageDialog(null, "El registro se ha borrado satisfactoriamente.", "Demosys", JOptionPane.INFORMATION_MESSAGE);
                        limpiar();

                    } else // no 
                    {
                        JOptionPane.showMessageDialog(null, "La operacion ha sido cancelada", "Confirmacion", JOptionPane.INFORMATION_MESSAGE);

                        this.jbCancelar.doClick();
                    }
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(ProveedorUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

}
